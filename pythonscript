import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 

rawData = pd.read_csv(r"XXXXX.csv")

data = rawData.iloc[:,0:2]
data.iloc[:,0] = pd.to_datetime(data.iloc[:,0], format='%Y%m%d')
data = data.sort_values(by=['userID', 'date']).reset_index(drop=True)

start_date = '2018-07-01'
end_date = '2018-09-30'
mask = (data['date'] >= start_date) & (data['date'] <= end_date)

JulioAgostoSeptiembre = data.loc[mask]
JulioAgostoSeptiembre = JulioAgostoSeptiembre.sort_values(by=['userID', 'date']).reset_index(drop=True)

OctumbreNoviembre = data.loc[-mask].sort_values(by=['userID', 'date']).reset_index(drop=True)

JulioAgostoSeptiembre["window"] = JulioAgostoSeptiembre.groupby(["userID"]).diff()

windowTime = JulioAgostoSeptiembre.iloc[:, 1:3].dropna().reset_index(drop=True)

grouped = windowTime.groupby('userID')['window']

mean = (grouped.apply(lambda x: np.mean(x))).reset_index()
std = (grouped.apply(lambda x: np.std(x, ddof=1))).reset_index()
mean = mean.rename(columns={"window":"mean"})
std = std.rename(columns={"window":"std"})

estadisticos = mean.merge(std, on='userID', how='inner')

timeMaxUsers = JulioAgostoSeptiembre.groupby(["userID"]).max()
timeMaxUsers = timeMaxUsers.reset_index()
timeMaxUsers = timeMaxUsers.rename(columns={"date":"maxDate"})
timeMaxUsers["userID"] = timeMaxUsers["userID"].astype(np.int32)

users = estadisticos.merge(timeMaxUsers, on='userID', how='inner')
users = users.fillna("0 days 00:00:00.000000000")
users["churn"] = UsersOctubreNoviembre["userID"].isin(users["userID"])
users["churn"] = np.where(users["churn"]==True, "no", "yes")

bestPrecision = 0
bestModelB = 0
bestModelA = 0
bestRecall = 0
def frange(start, stop, step):
    i = start
    while i < stop:
        yield i
        i += step
        
for a in frange(1, 5, 0.1):
    for b in frange(1, 5, 0.1):
        usersbis = users
        usersbis["model"] = a*usersbis["mean"]+b*usersbis["std"]+usersbis["maxDate"]
        usersbis["prediction"] =  np.where(pd.to_datetime(usersbis["model"]) < pd.to_datetime('2018-10-01'),"yes","no")
        TruePositives = usersbis[((usersbis["churn"]==usersbis["prediction"]) & (usersbis["churn"]=='yes'))].count()
        FalsePositives = usersbis[((usersbis["churn"]!=usersbis["prediction"]) & (usersbis["churn"]=='no'))].count()
        FalseNegatives = usersbis[((usersbis["churn"]!=usersbis["prediction"]) & (usersbis["churn"]=='yes'))].count()
        precision = TruePositives[1]/(TruePositives[1]+FalsePositives[1]) 
        recall = TruePositives[1]/(TruePositives[1]+FalseNegatives[1]) 
        if recall>bestRecall:
            bestPrecision = precision 
            bestModelB = b
            bestModelA = a
            bestRecall = recall
